<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Saaientist</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Saaientist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Nov 2022 21:45:00 +0200</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic scatterplots in Threlte</title>
      <link>/posts/basic_threlte/</link>
      <pubDate>Thu, 17 Nov 2022 21:45:00 +0200</pubDate>
      
      <guid>/posts/basic_threlte/</guid>
      <description>Svelte is great for data visualisation, but for larger datasets the simple declarative approach to drawing &amp;lt;circle&amp;gt;-s inside an &amp;lt;svg&amp;gt; doesn&amp;#8217;t cut it anymore. Other libraries like three.js are capable of handling more data, but they are written for 3D visualisation instead of 2D plots.
 Below, I show a proof-of-concept for a three.js-based 2D scatterplot with 5,000 points.
  Figure 1. The final image&amp;#8230;&amp;#8203;  For installation of svelte-kit and threlte, I refer to their own websites.</description>
    </item>
    
    <item>
      <title>Node-link diagram in layercake.graphics</title>
      <link>/posts/nodelink-in-layercake/</link>
      <pubDate>Mon, 17 Oct 2022 20:45:00 +0200</pubDate>
      
      <guid>/posts/nodelink-in-layercake/</guid>
      <description>Creating visualisations in svelte is easy, but I&amp;#8217;ve been willing to try out layercake.graphics for a while. Unfortunately, the framework didn&amp;#8217;t have an example for node-link diagrams. With the help of https://github.com/jelmerbot we got it to work, including node dragging.
 Let _data/graph.json look like this: { &amp;#34;nodes&amp;#34;: [ {&amp;#34;id&amp;#34;: 1, &amp;#34;name&amp;#34;: &amp;#34;a&amp;#34;}, {&amp;#34;id&amp;#34;: 2, &amp;#34;name&amp;#34;: &amp;#34;b&amp;#34;}, {&amp;#34;id&amp;#34;: 3, &amp;#34;name&amp;#34;: &amp;#34;c&amp;#34;}, {&amp;#34;id&amp;#34;: 4, &amp;#34;name&amp;#34;: &amp;#34;d&amp;#34;}, {&amp;#34;id&amp;#34;: 5, &amp;#34;name&amp;#34;: &amp;#34;e&amp;#34;} ], &amp;#34;links&amp;#34;: [ {&amp;#34;source&amp;#34;: 1, &amp;#34;target&amp;#34;: 2}, {&amp;#34;source&amp;#34;: 1, &amp;#34;target&amp;#34;: 3}, {&amp;#34;source&amp;#34;: 2, &amp;#34;target&amp;#34;: 3}, {&amp;#34;source&amp;#34;: 3, &amp;#34;target&amp;#34;: 4}, {&amp;#34;source&amp;#34;: 3, &amp;#34;target&amp;#34;: 5} ]}</description>
    </item>
    
    <item>
      <title>Using git worktree</title>
      <link>/posts/git-worktree/</link>
      <pubDate>Sat, 17 Sep 2022 16:04:00 +0200</pubDate>
      
      <guid>/posts/git-worktree/</guid>
      <description>Working on a project under git and pushing it to a central repository makes sure that you have history of the files preserved etc. Also: it enables experimentation. However, there are instances where things might get tricky. Case in point: hot fixes. When working on a feature branch and having to make a quick fix in the main branch, you would either stash all changes and make the fix, or commit everything that you already have even if it&amp;#8217;s not completed yet.</description>
    </item>
    
    <item>
      <title>Svelte/ArangoDB development and docker-compose</title>
      <link>/posts/svelte-arangodb-development-under-docker-compose/</link>
      <pubDate>Mon, 18 Jul 2022 14:39:00 +0200</pubDate>
      
      <guid>/posts/svelte-arangodb-development-under-docker-compose/</guid>
      <description>Another one for my personal notebook&amp;#8230;&amp;#8203;
 I&amp;#8217;m running a docker-based application which includes a svelte front/backend and an ArangoDB database that are orchestrated using docker-compose.
 Part of the docker-compose.yml file:
 services: frontend: build: context: frontend dockerfile: Dockerfile ports: - 5050:3000 networks: - my_docker_network arangodb: image: arangodb:3.9 restart: always ports: - 8529:8529 networks: - my_docker_network volumes: - arangodb_data_container:/var/lib/arangodb3 - arangodb_apps_data_container:/var/lib/arangodb3-apps networks: my_docker_network: volumes: arangodb_data_container: arangodb_apps_data_container:  The frontend can access the database because they are on the same docker network: a database.</description>
    </item>
    
    <item>
      <title>How to create Word file from asciidoc</title>
      <link>/posts/how-to-create-word-file-from-asciidoc/</link>
      <pubDate>Thu, 07 Jul 2022 14:16:08 +0200</pubDate>
      
      <guid>/posts/how-to-create-word-file-from-asciidoc/</guid>
      <description>The easiest way to create Microsoft Word files (.docx) from asciidoc, is to generate the .html using asciidoctor and then using pandoc to convert that .html to .docx.
 In the code below, we avoid having to install pandoc by running it from a docker container.
 asciidoctor my_file.adoc docker run --rm --volume &#34;`pwd`:/data&#34; pandoc/core my_file.html -o my_file.docx   These can be combined in a Makefile, like so:
 my_file.</description>
    </item>
    
    <item>
      <title>Svelte in Asciidoc</title>
      <link>/posts/svelte-in-asciidoc/</link>
      <pubDate>Thu, 07 Jul 2022 14:16:08 +0200</pubDate>
      
      <guid>/posts/svelte-in-asciidoc/</guid>
      <description>Sometimes you want to add interactive material or custom visualisations to a site built with asciidoc. Luckily, it is possible to do so. An example can be found in my datavis technologies material here.
 The following steps are based on this blog post:https://dtang.dev/2020-01-25-adding-svelte-3-to-a-jekyll-site
   Step 1: Create a separate directory for the svelte-components, including rollup.config.js, etc.
  Step 2: Create a svelte-components/src directory with:
  the svelte component files</description>
    </item>
    
    <item>
      <title>Vega-lite in svelte</title>
      <link>/posts/vega-lite-in-svelte/</link>
      <pubDate>Tue, 05 Jul 2022 16:04:00 +0200</pubDate>
      
      <guid>/posts/vega-lite-in-svelte/</guid>
      <description>There are many ways of incorporating graphics and plots in svelte and svelte-kit applications. I can definitely recommend checking out this talk by Matthias Stahl, graphics lead at Der Spiegel in Germany. This talk goes specifically through creating animated plots in svelte at the 24:46 mark.
 So you can code your own SVG in svelte, use D3, P5, Three.js, etc. In the code below, we use vega-lite.
 What I wanted to achieve with this component, is that the user can choose which dimensions are plotted against each other in a scatterplot.</description>
    </item>
    
    <item>
      <title>Running Docker Command From Svelte</title>
      <link>/posts/running-docker-command-from-svelte/</link>
      <pubDate>Fri, 24 Jun 2022 22:01:50 +0200</pubDate>
      
      <guid>/posts/running-docker-command-from-svelte/</guid>
      <description>What we&amp;#8217;re trying to do I have a setup where different docker containers are used in conjunction to provide a single application. More specifically, a database, a sveltekit app, and (at the moment just one) container to run specific analyses. The idea is that the sveltekit app in container 1 triggers a script in container 2 to change data in the database in container 3.
     Directory structure I created the following directory structure for the app:</description>
    </item>
    
    <item>
      <title>Clojurescript, re-frame and modular data visualisation</title>
      <link>/posts/clojure-reframe-vis/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/clojure-reframe-vis/</guid>
      <description>One of the issues we still have is how to combine our custom data visualisations in multi-view dashboards with brushing/linking. We&amp;#8217;ll have a programmer work on this for the next two years, but as clojure is a bit of a hobby I&amp;#8217;d like to try that out as well. It appears that clojurescript re-frame fits the bill.
 Get set up: 1 2 3  lein new re-frame my-project cd my-project lein figwheel dev</description>
    </item>
    
    <item>
      <title>Jupyter notebooks and docker</title>
      <link>/posts/jupyter-notebooks-docker/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/jupyter-notebooks-docker/</guid>
      <description>One of the courses I teach at KU Leuven is &#34;Management of Large-Scale Omics Datasets&#34;. It&amp;#8217;s basically a course focussing on NoSQL databases and mapreduce/spark. We go over document-oriented databases (i.c. mongodb), key-value stores, and graph databases (neo4j). The course also includes several exercise sessions where the students can practise getting information from these datastores. Question is: how to set all this up?
 Up to 2015, I applied for a teaching grant from Amazon AWS EC2 to run a server with all the necessary software and data installed.</description>
    </item>
    
    <item>
      <title>Saaientist20</title>
      <link>/posts/saaientist20/</link>
      <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/saaientist20/</guid>
      <description>This is a reboot of the saaientist blog that I kept many years ago. As I said then: &#34;It started out long ago as a personal notebook to help me remind how to do things, but evolved to cover more opinionated posts as well.&#34; That blog was very useful, as it helped me to organise my thoughts, served as my personal labjournal/notebook, and helped me to come in contact with many interesting people.</description>
    </item>
    
  </channel>
</rss>