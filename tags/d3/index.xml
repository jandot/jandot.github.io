<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>d3 on Saaientist</title>
    <link>/tags/d3/</link>
    <description>Recent content in d3 on Saaientist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Jul 2024 09:43:00 +0200</lastBuildDate>
    
	<atom:link href="/tags/d3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bringing a d3-force network into the viewport</title>
      <link>/posts/nodelink_to_viewport/</link>
      <pubDate>Mon, 08 Jul 2024 09:43:00 +0200</pubDate>
      
      <guid>/posts/nodelink_to_viewport/</guid>
      <description>One of the issues I&amp;#8217;ve always had with node-link diagrams in D3 is that nodes tend to migrate out of the viewpoint, forcing you to zoom and pan to get the whole graph into view.
 I finally hacked together a piece of code to solve that. Even brushing still works.
 const rescale_to_viewport = () =&amp;gt; { let extentX = extent(nodes.map((d) =&amp;gt; transform.applyX(d.x))) let extentY = extent(nodes.map((d) =&amp;gt; transform.applyY(d.y))) let scaleX = (extentX[1]-extentX[0])/(0.</description>
    </item>
    
    <item>
      <title>Basic D3 brush in svelte</title>
      <link>/posts/brush-in-svelte/</link>
      <pubDate>Sun, 24 Mar 2024 15:06:00 +0200</pubDate>
      
      <guid>/posts/brush-in-svelte/</guid>
      <description>Single plot A simple proof-of-principle to create brushing-linking between 2 SVG scatterplots in svelte. Based on the Observable notebook at https://observablehq.com/@d3/brush-filter, I was able to distill the following. The idea is that we have a RectangularBrush component that can wrap around an SVG with circles (or whatever). The brush component checks if each datapoint is within its boundaries, and sets the value for that component&amp;#8217;s ID to true in a selected object.</description>
    </item>
    
  </channel>
</rss>